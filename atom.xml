<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fate0</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.fatezero.org/"/>
  <updated>2017-08-05T08:22:28.899Z</updated>
  <id>http://blog.fatezero.org/</id>
  
  <author>
    <name>fate0</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>(TODO)消息队列</title>
    <link href="http://blog.fatezero.org/2017/10/01/message-queue/"/>
    <id>http://blog.fatezero.org/2017/10/01/message-queue/</id>
    <published>2017-10-01T22:53:27.000Z</published>
    <updated>2017-08-05T08:22:28.899Z</updated>
    
    <content type="html"><![CDATA[<p>浅谈消息队列</p>
<p>计划: 10-01 完成</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浅谈消息队列&lt;/p&gt;
&lt;p&gt;计划: 10-01 完成&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Package 钓鱼</title>
    <link href="http://blog.fatezero.org/2017/06/01/package-fishing/"/>
    <id>http://blog.fatezero.org/2017/06/01/package-fishing/</id>
    <published>2017-06-01T20:47:24.000Z</published>
    <updated>2017-08-05T08:22:28.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>前几天 <code>Samba</code> 公开了一个远程代码执行的漏洞，然后各种 POC 也随之出现，
<code>exploit-db</code> 上也有这样一个 Python 版本的 <a href="https://www.exploit-db.com/exploits/42060/" target="_blank" rel="external">POC:  Samba 3.5.0 - Remote Code Execution</a>.</p>
<a id="more"></a>
<p>直接执行 POC，报错误信息：</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/run-poc-at-the-first-time.png">
<p>这种情况非常简单，直接 <code>pip install smb</code> 就行，但是：</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/install-smb-package.png">
<p>好吧，我们还是需要 Google 一下这个 <code>smb</code> 的 package 名字，最后发现原来是 <code>pysmb</code>：</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/install-pysmb-and-run-poc.png">
<p>最后 POC 终于跑了起来.</p>
<p>我们再回过头来看看整个流程，似乎并没有什么地方不对劲。</p>
<p>直接说问题所在吧，如果你在 <code>2017-05-24</code> 到 <code>2017-05-31</code> 这段时间内执行过 <code>pip install smb</code> 或者 <code>pip download smb</code>，
那么恭喜你，你的名字可能出现在我的绵羊墙上。</p>
<h3 id="0x01-试水-2017-05-23-19-00"><a href="#0x01-试水-2017-05-23-19-00" class="headerlink" title="0x01 试水 (2017-05-23 19:00)"></a>0x01 试水 (2017-05-23 19:00)</h3><p>第一天，我在 PyPI 上投放了 4 个 evil package: <code>python-dev</code>、<code>mongodb</code>、<code>proxy</code>、<code>shadowsock</code> 
测试一下不检查 package、随意安装 package 的人有多少。</p>
<p>其中所有的内容都是用 <code>cookiecutter</code> 根据模版 <a href="https://github.com/fate0/cookiecutter-evilpy-package/tree/cf812e1f44ca052b5e7055a8ff8cf5c4d81dcf98" target="_blank" rel="external">cookiecutter-evilpy-package</a> 生成。</p>
<p>每个 package 都会收集用户的</p>
<ul>
<li>username</li>
<li>hostname</li>
<li>ip</li>
<li>hostinfo</li>
</ul>
<p>我选择了 GitHub Issues + webtask.io 的方式，将安装 evil package 的用户信息通过 webtask.io 中转到 GitHub Issues 上对外公开。</p>
<p>所以我就在 Github 上注册了个小马甲 <a href="https://github.com/evilpackage" target="_blank" rel="external">evilpackage</a> 专门提交 Issue。</p>
<p>因为 webtask.io 获取客户端 ip 的时候，其实获取到的是 webtask.io 前面 nginx 的 ip 地址，并不是用户的 ip，所以就只能在代码里面获取客户端的外网 ip.
使用 webtask.io 和 GitHub Issues 的主要原因是这两都是免费的。</p>
<h2 id="0x02-增加投放-package-2017-05-24-19-00"><a href="#0x02-增加投放-package-2017-05-24-19-00" class="headerlink" title="0x02 增加投放 package (2017-05-24 19:00)"></a>0x02 增加投放 package (2017-05-24 19:00)</h2><p>查看了一天的 Issues 数量，大概有 700+，效果非常不错，决定继续投放 evil package。
与此同时，@<a href="http://weibo.com/u/1260091985" target="_blank" rel="external">ztz</a> 同学也加入了游戏，也在 RubyGems 上投放 Gems。</p>
<p>继续投放 evil package，就必须想一些比较好的名字，我主要使用下面两种方法:</p>
<ol>
<li><p>Google 搜索提示框<br>直接根据 Google 的搜索框提示:</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/google-search-input-list.png">
<p>便收集到了没有在 PyPI 上注册，而且比较流行的 Package 名字:</p>
<ul>
<li>caffe</li>
<li>ffmpeg</li>
<li>git</li>
<li>mkl</li>
<li>opencl</li>
<li>opencv</li>
<li>openssl</li>
<li>pygpu</li>
<li>tkinter</li>
<li>vtk</li>
<li>proxy</li>
</ul>
</li>
<li><p>想象力<br>依据平时写代码的经验总结出下面可能觉得会常用，但并没有在 PyPI 上注册的 Package 名字:</p>
<ul>
<li>ftp</li>
<li>smb</li>
<li>hbase</li>
<li>samba</li>
<li>rabbitmq</li>
<li>zookeeper</li>
<li>phantomjs</li>
<li>memcached</li>
<li>requirement.txt</li>
<li>requirements.txt</li>
</ul>
</li>
</ol>
<p>其中 <code>requirements.txt</code> 并没有注册成功，稍后再说。</p>
<h2 id="0x03-暂停服务-2017-05-25-23-00"><a href="#0x03-暂停服务-2017-05-25-23-00" class="headerlink" title="0x03 暂停服务 (2017-05-25 23:00)"></a>0x03 暂停服务 (2017-05-25 23:00)</h2><p>晚上回家的时候又统计了一下安装量，一天安装量达到了 2000+，效果已经很显著，不必再增加新的 package 了，但是到了晚上 23:00 的时候，
我的 GitHub Issues 被恶意插入脏数据，所以只能暂停服务：</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/insert-useless-data.png">
<p>之所以只能暂停服务，那是因为 webtask.io 没法获取客户端 ip，我也没法 ban 掉对应的 ip，作出任何相对的处理，只能停服务。</p>
<p>话说到底谁才是攻击者。</p>
<h2 id="0x04-evilpackage-被封-2017-05-26-2-00"><a href="#0x04-evilpackage-被封-2017-05-26-2-00" class="headerlink" title="0x04 evilpackage 被封 (2017-05-26 2:00)"></a>0x04 evilpackage 被封 (2017-05-26 2:00)</h2><p>我专门提交 Issue 的小马甲 <a href="https://github.com/evilpackage" target="_blank" rel="external">evilpackage</a> 因为触发了 GitHub 对 Spam 的检测，所以被封号了。
早上起床看到消息后，立马写邮件申诉，直到 2017-05-26 13:00 终于回复我的邮件了：</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/unlock-evilpackage.png">
<h2 id="0x05-放弃-webtask-io-2017-05-26-19-00"><a href="#0x05-放弃-webtask-io-2017-05-26-19-00" class="headerlink" title="0x05 放弃 webtask.io (2017-05-26 19:00)"></a>0x05 放弃 webtask.io (2017-05-26 19:00)</h2><p>为了避免和之前一样被恶意插入脏数据，决定要放弃 webtask.io，每月花费 $10 巨款购入一台 vps。</p>
<p>使用 nginx + flask 的配置，继续将 user data 提交到 GitHub Issues 上。</p>
<p>nginx 的 <code>ngx_http_limit_req_module</code> 模块最大能够支持 <code>1s/m</code>，也就是最多可以限制每个 ip 在每分钟内最多请求一次，
所以我们必须修改 <code>ngx_http_limit_req_module</code> 模块代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">// src/http/modules/ngx_http_limit_req_module.c</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ngx_strncmp(value[i].data, <span class="string">"rate="</span>, <span class="number">5</span>) == <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">            len = value[i].len;</div><div class="line">            p = value[i].data + len - <span class="number">3</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (ngx_strncmp(p, <span class="string">"r/s"</span>, <span class="number">3</span>) == <span class="number">0</span>) &#123;</div><div class="line">                scale = <span class="number">1</span>;</div><div class="line">                len -= <span class="number">3</span>;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ngx_strncmp(p, <span class="string">"r/m"</span>, <span class="number">3</span>) == <span class="number">0</span>) &#123;</div><div class="line">                scale = <span class="number">60</span>;</div><div class="line">                len -= <span class="number">3</span>;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ngx_strncmp(p, <span class="string">"wtf"</span>, <span class="number">3</span>) == <span class="number">0</span>) &#123;</div><div class="line">                scale = <span class="number">1000</span>;</div><div class="line">                len -= <span class="number">3</span>;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>增加一个 <code>else if</code> block，直接将 scale 增加到 1000，这样就能限制每个 ip 在 16 min 内只能访问一次我们的接口，
除非使用大量代理，不然很难在短时间内插入大量脏数据。</p>
<h2 id="0x06-repo-被封-2017-05-27-3-00"><a href="#0x06-repo-被封-2017-05-27-3-00" class="headerlink" title="0x06 repo 被封 (2017-05-27 3:00)"></a>0x06 repo 被封 (2017-05-27 3:00)</h2><p>早上起床刷新一下 GitHub Issues 页面，结果发现：</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/lock-repo.png">
<p>邮件：</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/lock-repo-email.png">
<p>赶紧先上服务器加上一行代码，将用户上传的数据先暂时存在本地（之前太懒）。
然后马上回邮件，问情况，两天后：</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/lock-repo-response-email.png">
<p>解封无望，之前的数据大概就是没了。</p>
<p>目前还能通过 GitHub Search 找到以前的部分数据 <a href="https://github.com/search?l=&amp;q=repo%3Afate0%2Fcookiecutter-evil-pypackage&amp;ref=advsearch&amp;type=Issues&amp;utf8=%E2%9C%93" target="_blank" rel="external">GitHub Issue</a></p>
<h2 id="0x07-写-web-界面-2017-05-30-19-00"><a href="#0x07-写-web-界面-2017-05-30-19-00" class="headerlink" title="0x07 写 web 界面 (2017-05-30 19:00):"></a>0x07 写 web 界面 (2017-05-30 19:00):</h2><p>由于之前一直在忙，最后拖到了30号才开始写 web 展示界面 <a href="http://evilpackage.fatezero.org/" target="_blank" rel="external">http://evilpackage.fatezero.org/</a></p>
<p>也准备好新的 cookiecutter 模版 <a href="https://github.com/fate0/cookiecutter-evilpy-package/commit/b1a968407b1a94b17298af969727848ad1325cae" target="_blank" rel="external">cookiecutter-evilpy-package</a></p>
<p>新的 cookiecutter 模版会提示用户安装了 evilpackage，并打开用户的浏览器去访问 <a href="http://evilpackage.fatezero.org/" target="_blank" rel="external">http://evilpackage.fatezero.org/</a>，让用户知道，自己已经是绵羊墙上的一员了。</p>
<p>计划打算第二天再往 PyPI 上提交新版本的 Package。</p>
<h2 id="0x08-清空-2017-05-31"><a href="#0x08-清空-2017-05-31" class="headerlink" title="0x08 清空 (2017-05-31):"></a>0x08 清空 (2017-05-31):</h2><p>早上查找资料的时候发现，原来已经有好几批人干过和我一样类似的事情了</p>
<ul>
<li>2013-06-06: <a href="https://pypi.python.org/pypi/requestes" target="_blank" rel="external">requestes 0.0.1</a></li>
<li>2016-01-25: <a href="https://pypi.python.org/pypi/requirements-dev/1.0.0" target="_blank" rel="external">requirements-dev 1.0.0</a></li>
<li>2016-03-17: <a href="http://incolumitas.com/data/thesis.pdf" target="_blank" rel="external">Typosquatting in Programming Language Package Managers</a> </li>
</ul>
<p>前两批都只是上传一个 package 用来提示安装用户，也防止恶意用户使用这些 package 名字，
后面一个小哥和我一样收集了用户不太敏感的信息，只不过他的数据一直没有公开。</p>
<p>过了一会 @<a href="http://weibo.com/u/1260091985" target="_blank" rel="external">ztz</a> 同学告诉我他的 RubyGems 被清空了。</p>
<p>再过了一会我这边也被 PyPI 管理员警告要删除账号了，所以我就把所有的 Package 给删除了，账号也给删除了。</p>
<p>目前为止所有的 package 又回到了 unregister 的状态, 任何人都可以继续注册使用我之前注册的 package.</p>
<h2 id="0x09-数据统计"><a href="#0x09-数据统计" class="headerlink" title="0x09 数据统计"></a>0x09 数据统计</h2><p>目前我只能对在 <a href="http://evilpackage.fatezero.org/" target="_blank" rel="external">http://evilpackage.fatezero.org/</a> 上那 10685 条数据进行统计</p>
<p>从 2017-05-27 10:38:03 到 2017-05-31 18:24:07，总计 106 个小时内，
有 9726 不重复的 ip 安装了 evil package，平均每个小时有 91 个 ip 安装了 evil package。</p>
<ol>
<li><p>每个 package 命中排名:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">2862 opencv</div><div class="line">2834 tkinter</div><div class="line">810 mkl</div><div class="line">789 python-dev</div><div class="line">713 git</div><div class="line">683 openssl</div><div class="line">535 caffe</div><div class="line">328 ffmpeg</div><div class="line">224 phantomjs</div><div class="line">200 smb</div><div class="line">191 vtk</div><div class="line">179 pygpu</div><div class="line">113 mongodb</div><div class="line">70 requirement.txt</div><div class="line">56 memcached</div><div class="line">31 rabbitmq</div><div class="line">15 ftp</div><div class="line">14 shadowsock</div><div class="line">12 samba</div><div class="line">10 proxy</div><div class="line">10 hbase</div><div class="line">5 zookeeper</div></pre></td></tr></table></figure>
</li>
<li><p>前 50 个国家命中排名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">2507 United States</div><div class="line">1667 China</div><div class="line">772 India</div><div class="line">481 Germany</div><div class="line">448 Japan</div><div class="line">331 France</div><div class="line">319 Republic of Korea</div><div class="line">306 United Kingdom</div><div class="line">305 Russia</div><div class="line">297 Canada</div><div class="line">225 Brazil</div><div class="line">183 Australia</div><div class="line">179 Netherlands</div><div class="line">167 Poland</div><div class="line">147 Taiwan</div><div class="line">129 Italy</div><div class="line">127 Israel</div><div class="line">126 Spain</div><div class="line">106 Singapore</div><div class="line">103 Ukraine</div><div class="line">89 Hong Kong</div><div class="line">87 Switzerland</div><div class="line">76 Sweden</div><div class="line">74 Turkey</div><div class="line">60 Ireland</div><div class="line">57 Vietnam</div><div class="line">57 Iran</div><div class="line">54 Belgium</div><div class="line">53 Finland</div><div class="line">52 Austria</div><div class="line">49 Pakistan</div><div class="line">49 Indonesia</div><div class="line">47 Argentina</div><div class="line">43 New Zealand</div><div class="line">42 Mexico</div><div class="line">41 Romania</div><div class="line">40 Thailand</div><div class="line">37 Norway</div><div class="line">37 Czechia</div><div class="line">31 South Africa</div><div class="line">31 Denmark</div><div class="line">31 Colombia</div><div class="line">29 Portugal</div><div class="line">29 Greece</div><div class="line">29 Chile</div><div class="line">24 Philippines</div><div class="line">23 Malaysia</div><div class="line">20 Hungary</div><div class="line">20 Belarus</div><div class="line">19 Nepal</div></pre></td></tr></table></figure>
</li>
<li><p>每个访问排名 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">28 114.255.40.3</div><div class="line">25 46.105.249.70</div><div class="line">16 54.84.16.79</div><div class="line">16 54.237.234.187</div><div class="line">16 54.157.41.7</div><div class="line">16 54.145.106.255</div><div class="line">16 52.90.178.211</div><div class="line">13 34.198.151.69</div><div class="line">12 52.221.7.193</div><div class="line">11 54.235.37.25</div><div class="line">10 34.224.47.129</div><div class="line">9 172.56.26.43</div><div class="line">7 94.153.230.50</div><div class="line">7 80.239.169.204</div><div class="line">7 73.78.62.6</div><div class="line">7 54.87.185.66</div><div class="line">7 52.207.13.234</div><div class="line">7 113.140.11.125</div><div class="line">6 52.55.104.10</div><div class="line">6 24.108.0.220</div></pre></td></tr></table></figure>
</li>
</ol>
<p>光从这几天来看，在 PyPI 上投放 evilpackage 的效果还是非常不错的，
每天都会有大概 2200+ 个独立 ip 进行访问，数据量稍微比之前那位小哥好一点，
也就是说，即便是类似的文章发出来，过了一年之后，随意安装 package 的这种情况完全没有改善，可能更严重了。</p>
<p>那位小哥释放掉所有的 package 之后，我作为一个 “恶意者” 再次使用他之前使用的 <code>git</code>、<code>openssl</code> 名字来统计数据，
我作为一个 “恶意者”，被官方勒令删除所有的 package，这些 package 名字再次被释放，我比较好奇下一位 “恶意者” 会是谁，
会在 package 里放什么？会是和我一样收集数据，还是直接 <code>rm -rf /</code>，还是勒索。拭目以待。</p>
<h2 id="0x10-requirements-txt"><a href="#0x10-requirements-txt" class="headerlink" title="0x10 requirements.txt"></a>0x10 requirements.txt</h2><p>一般经常使用 Python 的人都知道 <code>requirements.txt</code> 是整个项目的依赖文件，一般这样使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip install -r requirements.txt</div></pre></td></tr></table></figure>
<p>不过也有可能一时手速过快，敲打成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip install requirements.txt</div></pre></td></tr></table></figure>
<p>所以 <code>requirements.txt</code> 也是一个比较好的 evil package 的名字</p>
<h4 id="诡异的-requirements-txt"><a href="#诡异的-requirements-txt" class="headerlink" title="诡异的 requirements.txt"></a>诡异的 <code>requirements.txt</code></h4><p>在 2017-05-24 19:00 晚上，我尝试在 PyPI 注册上传 <code>requirements.txt</code> 的时候：</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/upload-requirements-failed.png">
<p>嗯，都失败了，但是 <a href="https://github.com/search?utf8=%E2%9C%93&amp;q=repo%3Afate0%2Fcookiecutter-evil-pypackage+requirements.txt&amp;type=Issues" target="_blank" rel="external">GitHub Issues</a> 上竟然会有 153 个和 <code>requirements.txt</code> 相关的 Issues：</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/requirements-txt-show-in-issues.png">
<p>我并不怀疑这些 <code>requirements.txt</code> 数据的真实性，因为就没有人知道我尝试上传过 <code>requirements.txt</code>，所以这些数据肯定是真实的。</p>
<p>PyPI 上也并不存在 <code>requirements.txt</code> 信息，本地尝试安装也失败了，至今仍未明白这种情况为何发生。</p>
<h4 id="绕过-PyPI-requirements-txt-的限制"><a href="#绕过-PyPI-requirements-txt-的限制" class="headerlink" title="绕过 PyPI requirements.txt 的限制"></a>绕过 PyPI <code>requirements.txt</code> 的限制</h4><p>在 PyPI 账号被删除之后，我还是对 <code>requirements.txt</code> 很好奇，为什么之前 GitHub 上会有记录？
能不能绕过 PyPI 的限制？下面简单讲一下如何绕过 PyPI 的限制。</p>
<p>我们直接查看提交 Package 时，PyPI 对 Package 名字限制的地方：
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># from: https://github.com/pypa/pypi-legacy/blob/master/webui.py#L2429</span></div><div class="line"><span class="meta">@must_tls</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit_pkg_info</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    name = data[<span class="string">'name'</span>]</div><div class="line">    version = data[<span class="string">'version'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> name.lower() <span class="keyword">in</span> (<span class="string">'requirements.txt'</span>, <span class="string">'rrequirements.txt'</span>,</div><div class="line">            <span class="string">'requirements-txt'</span>, <span class="string">'rrequirements-txt'</span>):</div><div class="line">        <span class="keyword">raise</span> Forbidden, <span class="string">"Package name '%s' invalid"</span> % name</div></pre></td></tr></table></figure></p>
<p>通过上面的代码，我们可以看到 PyPI 直接硬编码 <code>&#39;requirements.txt&#39;, &#39;rrequirements.txt&#39;, 
&#39;requirements-txt&#39;, &#39;rrequirements-txt&#39;</code> 禁止用户上传这些文件。</p>
<p>我们再看看 <code>pip install xxx</code> 的时候，PyPI 是怎么查找 Package 的：
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># from: https://github.com/pypa/pypi-legacy/blob/master/store.py#L611</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_package</span><span class="params">(self, name)</span>:</span></div><div class="line">    <span class="string">'''Return names of packages that differ from name only in case.'''</span></div><div class="line">    cursor = self.get_cursor()</div><div class="line">    sql = <span class="string">'select name from packages where normalize_pep426_name(name)=normalize_pep426_name(%s)'</span></div><div class="line">    safe_execute(cursor, sql, (name, ))</div><div class="line">    <span class="keyword">return</span> [r[<span class="number">0</span>] <span class="keyword">for</span> r <span class="keyword">in</span> cursor.fetchall()]</div></pre></td></tr></table></figure></p>
<p>好吧，直接查找数据库，我们再跟下来看 <code>normalize_pep426_name</code>：
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># from: https://github.com/pypa/warehouse/blob/master/warehouse/migrations/versions/3af8d0006ba_normalize_runs_of_characters_to_a_.py#L27</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upgrade</span><span class="params">()</span>:</span></div><div class="line">    op.execute(</div><div class="line">        <span class="string">""" CREATE OR REPLACE FUNCTION normalize_pep426_name(text)</span></div><div class="line"><span class="string">            RETURNS text AS</span></div><div class="line"><span class="string">            $$</span></div><div class="line"><span class="string">                SELECT lower(regexp_replace($1, '(\.|_|-)+', '-', 'ig'))</span></div><div class="line"><span class="string">            $$</span></div><div class="line"><span class="string">            LANGUAGE SQL</span></div><div class="line"><span class="string">            IMMUTABLE</span></div><div class="line"><span class="string">            RETURNS NULL ON NULL INPUT;</span></div><div class="line"><span class="string">        """</span></div><div class="line">    )</div><div class="line">    op.execute(<span class="string">"REINDEX INDEX project_name_pep426_normalized"</span>)</div></pre></td></tr></table></figure></p>
<p>看到中间那个正则了吧，这也就意味着 
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip install youtube-dl</div><div class="line">pip install youtube_dl</div><div class="line">pip install youtube.dl</div><div class="line">pip install youtube-_-dl</div><div class="line">pip install youtube.-.dl</div></pre></td></tr></table></figure></p>
<p>这几条命令其实都是等价的，都是在安装 <code>youtube_dl</code>, 那么我们就可以很容易的就绕过 PyPI 的限制，
直接上传一个 <code>requiremnets--txt</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">twine register dist/requirements--txt-0.1.0.tar.gz</div><div class="line">twine upload dist/requirements--txt-0.1.0.tar.gz</div></pre></td></tr></table></figure>
<p>来来来，我们直接尝试 <code>pip install requirements.txt</code>：</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/install-requirements--txt.png">
<p>通过上面的图，我们可以看到 PyPI 已经返回我们的 package url，
到了 pip 准备安装这个 package 的时候报错了，所以直接看 pip 代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># https://github.com/pypa/pip/blob/master/pip/index.py#L650</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> version:</div><div class="line">    version = egg_info_matches(egg_info, search.supplied, link)</div><div class="line"><span class="keyword">if</span> version <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">    self._log_skipped_link(</div><div class="line">        link, <span class="string">'wrong project name (not %s)'</span> % search.supplied)</div><div class="line">    <span class="keyword">return</span></div></pre></td></tr></table></figure>
<p>看了代码，也就是没法在 url 中获取 package 的版本号，
因为 package 的名字(<code>requirements--txt</code>)和搜索名字(<code>requirements.txt</code>)对不上，我们得找找其他方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># https://github.com/pypa/pip/blob/master/pip/index.py#L626</span></div><div class="line"><span class="keyword">if</span> ext == wheel_ext:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        wheel = Wheel(link.filename)</div><div class="line">    <span class="keyword">except</span> InvalidWheelFilename:</div><div class="line">        self._log_skipped_link(link, <span class="string">'invalid wheel filename'</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">if</span> canonicalize_name(wheel.name) != search.canonical:</div><div class="line">        self._log_skipped_link(</div><div class="line">            link, <span class="string">'wrong project name (not %s)'</span> % search.supplied)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> wheel.supported(self.valid_tags):</div><div class="line">        self._log_skipped_link(</div><div class="line">            link, <span class="string">'it is not compatible with this Python'</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    version = wheel.version</div></pre></td></tr></table></figure>
<p>看到这里，大家应该也知道了，之前我们一直都是使用 source 的方式提交 package，如果我们直接打包成 wheel，
根据上面的代码，就不会再报错了，我们重新打包，再次上传：</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/upload-requirements-success.png">
<p>终于成功了，当然 wheel 安装方式并不能直接执行命令，
不过我们可以通过给 <code>requirements.txt</code> 添加一个恶意依赖达到执行任意代码的效果。</p>
<p>在这里，我就添加了一个名为 <code>ztz</code> 的 source package，用于提醒安装 <code>requirements.txt</code> 的用户</p>
<img src="http://static.fatezero.org/blog/img/package-fishing/ztz.png">
<h2 id="0x11-总结"><a href="#0x11-总结" class="headerlink" title="0x11 总结"></a>0x11 总结</h2><p>最后还是提一下我是怎么被 PyPI 官方发现的，原因非常简单，
我之前每个 evil package 都是用同一个 cookiecutter 模版生成，
而每个模版的 short desc 都是 <code>just for fun : )</code>，所以在 <a href="https://pypi.python.org/pypi" target="_blank" rel="external">PyPI 首页</a> 刷了一排 <code>just for fun : )</code>。
就是因为这样简单的理由被发现。</p>
<p>但是如果，我为每个 evil package 准备不同模版，为每个 evil package 准备文档， 
为每个 evil package 准备不同的 PyPI account 上传，每次上传使用不同 ip，在 PyPI 没有审核机制的情况下，
是很难将所有的 evil package 一网打尽，只能靠别人 report。</p>
<p>所以防御方案就完全不可能期待 PyPI 会做什么，只能提升自我对信息安全意识，对 PyPI 上不熟悉的项目一律采取不可信的态度，
意识到随意 <code>pip install</code> 就和随意的执行 <code>exe</code> 一样危险。</p>
<p>想做一件坏事情真不容易，快去看看 <a href="http://evilpackage.fatezero.org/" target="_blank" rel="external">http://evilpackage.fatezero.org/</a> 上面有没有你的名字。</p>
<iframe src="//music.163.com/outchain/player?type=2&id=478731355&auto=0&height=66" width="500" height="86" frameborder="0" allowfullscreen></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;前几天 &lt;code&gt;Samba&lt;/code&gt; 公开了一个远程代码执行的漏洞，然后各种 POC 也随之出现，
&lt;code&gt;exploit-db&lt;/code&gt; 上也有这样一个 Python 版本的 &lt;a href=&quot;https://www.exploit-db.com/exploits/42060/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;POC:  Samba 3.5.0 - Remote Code Execution&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解密 RubyEncoder</title>
    <link href="http://blog.fatezero.org/2017/02/26/decrypt-rubyencoder/"/>
    <id>http://blog.fatezero.org/2017/02/26/decrypt-rubyencoder/</id>
    <published>2017-02-26T18:47:24.000Z</published>
    <updated>2017-08-05T08:22:28.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>RubyEncoder 是一款对 Ruby 代码进行混淆加密的软件，因为最近我要破解某个使用 RubyEncoder 加密的 Ruby 程序，
所以工作就转移到如何解密 RubyEncoder 加密的程序。</p>
<a id="more"></a>
<h2 id="0x01-信息收集"><a href="#0x01-信息收集" class="headerlink" title="0x01 信息收集"></a>0x01 信息收集</h2><p>要想了解 RubyEncoder，那肯定是要去<a href="https://www.rubyencoder.com/trial.html?cm_id=151&amp;action=submit_trial" target="_blank" rel="external">官网</a>下载一份试用版，但是无论你怎么填写试用资料：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-rubyencoder/rubyencoder-not-allow-regist.png">
<p>我隐约记得 Hacking Team RCS 也用了 RubyEncoder，所以比较幸运的，
我从 <a href="https://wikileaks.org/hackingteam/emails/?q=rubyencoder&amp;mfrom=&amp;mto=&amp;title=&amp;notitle=&amp;date=&amp;nofrom=&amp;noto=&amp;count=50&amp;sort=0#searchresult" target="_blank" rel="external">Hacking Team 邮件</a> 中找到了一个可以登陆账号密码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Username: alor@hackingteam.it</div><div class="line">Password: Oyf4GSy0</div></pre></td></tr></table></figure>
<p>下载到了 RubyEncoder-2.3，并偷偷的使用 Hacking Team 一个 License Key 成功激活了 RubyEncoder</p>
<img src="http://static.fatezero.org/blog/img/decrypt-rubyencoder/rubyencoder-registration.png">
<p>先简单试用一下 RubyEncoder</p>
<img src="http://static.fatezero.org/blog/img/decrypt-rubyencoder/rubyencoder-encrypt.png">
<p>上图是 RubyEncoder 对某个项目加密的主界面，在这个界面中可以看到，我们可以选择支持的 Ruby 版本。
由于因为可以选多个版本号以及 1.8.x 也在支持的版本内，所以可以判定加密后的文件不会是 iseq 或者修改后的 iseq。</p>
<img src="http://static.fatezero.org/blog/img/decrypt-rubyencoder/rubyencoder-lock-options.png">
<p>上图是 RubyEncoder 支持的加密选项，可以进行 IP、Domain、MAC、联网、时间、License 限制。其中除了 License 文件之外，其他都是纸老虎，
如果 License 文件没有参与对文件的加密，那 License 限制也是纸老虎。不过根据官方文档描述</p>
<blockquote>
<p>The algorithm uses an idea of two keys. The first key (Project Id) is stored in the encrypted area of the protected script and is used to decrypt an external license file. The second key (Project Key) is stored in the license file and it is used to decrypt the bytecode from the protected script.</p>
</blockquote>
<p>所以如果没有 License 文件是很难将程序跑起来的，不过这篇文章的目的不是怎么样解除这些限制，而是如何解密 RubyEncoder 加密后的 Ruby 代码。</p>
<p>我们再来看一下 RubyEncoder 的目录结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.</div><div class="line">├── Loaders</div><div class="line">│   ├── Linux</div><div class="line">│   │   ├── loader.rb</div><div class="line">│   │   ├── my.so</div><div class="line">│   │   ├── rgloader.linux.so</div><div class="line">│   │   ├── rgloader.linux.x86_64.so</div><div class="line">│   │   ├── rgloader19.linux.so</div><div class="line">│   │   ├── rgloader19.linux.x86_64.so</div><div class="line">│   │   ├── rgloader192.linux.so</div><div class="line">│   │   ├── rgloader192.linux.x86_64.so</div><div class="line">│   │   ├── rgloader193.linux.so</div><div class="line">│   │   ├── rgloader193.linux.x86_64.so</div><div class="line">│   │   ├── rgloader20.linux.so</div><div class="line">│   │   ├── rgloader20.linux.x86_64.so</div><div class="line">│   │   ├── rgloader21.linux.so</div><div class="line">│   │   ├── rgloader21.linux.x86_64.so</div><div class="line">│   │   ├── rgloader22.linux.so</div><div class="line">│   │   ├── rgloader22.linux.x86_64.so</div><div class="line">│   │   ├── rgloader23.linux.so</div><div class="line">│   │   └── rgloader23.linux.x86_64.so</div><div class="line">│   ├── Mac\ OS\ X // 省略 ..</div><div class="line">│   ├── MinGW // 省略 ...</div><div class="line">│   └── Windows // 省略 ...</div><div class="line">├── RubyEncoder</div><div class="line">├── license.txt</div><div class="line">├── licgen</div><div class="line">├── rgencoder</div><div class="line">├── rginfo</div><div class="line">├── rubyencoder18.bundle</div><div class="line">├── rubyencoder19.bundle</div><div class="line">├── rubyencoder192.bundle</div><div class="line">├── rubyencoder20.bundle</div><div class="line">├── rubyencoder21.bundle</div><div class="line">├── rubyencoder22.bundle</div><div class="line">├── rubyencoder23.bundle</div><div class="line">└── update</div></pre></td></tr></table></figure>
<p>简单看了一下 <code>rubyencoder*.bundle</code> 文件，应该是直接把整个 Ruby 给打包进来了，应该是加密的过程中需要 Ruby 的一些功能，
不过我并不是特别关注加密过程，所以直接看 <code>Loaders</code> 目录下的文件，这个目录下包含了所支持的平台下、Ruby 版本的解密 so 文件。</p>
<p>当然除了需要下载 RubyEncoder 程序，还需要找一找有没有前辈已经搞定这个程序的，
google 一番之后找到 <a href="https://www.ruby-forum.com/topic/168409#741854" target="_blank" rel="external">I found way to protect Source Code! :)</a> 这个帖子。</p>
<p>这个帖子的思路是：</p>
<ol>
<li>将 <code>ruby_exec</code> 修改成 <code>ruby_exic</code> 以便获得 AST</li>
<li>使用修改后的 <code>ParseTree</code> 将 Ruby 内部的 AST 转成 sexp</li>
<li>使用 <code>ruby2ruby</code> 将 sexp 转成 Ruby 代码</li>
</ol>
<p>不过这个帖子当时使用的是 <code>Ruby 1.8.7</code>，也就是当时 Ruby 还是构建完 AST 之后就直接执行，1.9.x 后的 Ruby 需要编译成 iseq。
另外由于 <code>Ruby 1.8</code> 和 <code>Ruby 2.x</code> 有很大的不同，上面的 <code>ParseTree</code> 在 Ruby 使用 iseq 之后就再也不能使用了。
所以上面的方法在 <code>Ruby 2.x</code> 中行不通了。</p>
<h2 id="0x02-简单逆向"><a href="#0x02-简单逆向" class="headerlink" title="0x02 简单逆向"></a>0x02 简单逆向</h2><p>我们使用 RubyEncoder 对以下代码进行加密</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line">puts <span class="string">"Hello World!"</span></div></pre></td></tr></table></figure>
<p>得到下面加密后的代码</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="comment"># RubyEncoder v2.3.0</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">self</span>.respond_to?(<span class="symbol">:RGLoader_load</span>,<span class="symbol">:include_private</span>) <span class="keyword">then</span> _d = _d<span class="number">0</span> = File.expand_path(File.dirname(__FILE_<span class="number">_</span>)); <span class="keyword">while</span> <span class="number">1</span> <span class="keyword">do</span> _f = _d + <span class="string">'/rgloader/loader.rb'</span>; <span class="keyword">break</span> <span class="keyword">if</span> File.exist?(_f); _d1 = File.dirname(_d); <span class="keyword">if</span> _d1 == _d <span class="keyword">then</span> raise <span class="string">"Ruby script '"</span>+__FILE_<span class="number">_</span>+<span class="string">"' is protected by RubyEncoder and requires a RubyEncoder loader to be installed. Please visit the http://www.rubyencoder.com/loaders/ RubyEncoder web site to download the required loader and unpack it into '"</span>+_d<span class="number">0</span>+<span class="string">"/rgloader/' directory in order to run this protected file."</span>; exit; <span class="keyword">else</span> _d = _d1; <span class="keyword">end</span>; <span class="keyword">end</span>; <span class="keyword">require</span> _f; <span class="keyword">end</span>; RGLoader_load(<span class="string">'AAIAAAAEgAAAAIAAAAAA/0R/d65ujW/5OhgbeUf0jhTRfPXr0uXNuC7gK8ycmR473fPEIlsgFP1/KF+CYBVbQy4xoLUhBFtBlYwH2aDOtcTasNDJPMDtoEgRuRdFRDgJoX1oKhrm0ZKm9OdIM6MbXRc/fh4n984TVew76DqbxQTplVhMxzOCp/mKgLU+shxBFAAAAGAAAAA7Nu8kj4NtO8BQECP2bW1TonmX+NADX/HETWg1j5fvbB8gptZ38XCzJxOccT2CTUsTT8GFq67RttUD7IR/xN2FBCWKMZ1BlGYVlhSmSUc6hS5RfglTuyvdVdjnsgcnkTAVAAAAYAAAAIrxSQfPHlMc89mPBUXSQ6vxmM9yoDu7Rf+O87mTUW4L0VuAWkIhvFUBxXRVm6Q7kkWHg7D7cdIwwA62+ewy91l56aMIQujAKZrVn4T1zreKf1QdGvK+QGY4rIpGEmTBhBYAAABoAAAADdYzBFrSrrZ4o9uzaoq+Yxjk44lzEa+/oxXM7fmbm8gJ1W3MlUZyPqIjW01KUb6nZjWIAz629+KP5nL/GMP0BClkOjpXQ9b95R/qvlDzuP7UZHPeqaIJq2yMN7Mh9WROfAhLlhmK86AXAAAAcAAAAGgSDy/YvPJQsKnC+JvR+ITlVdWPGodUNT10I0CPLu9d81hMtEL9hU4t9yVfBcS2BWDqBg3ahhUTvqNYxwvX8NCHmZU4LQmdd3dJneWJzGy6VbAQeVDNeaJl8/SPdRn1VXaspqWGYFn1cXqp7rhHLUcAAAAA'</span>);</div></pre></td></tr></table></figure>
<p>可以看到最关键的函数就是 <code>RGLoader_load</code>，所以直接将 <code>rgloader22.linux.x86_64.so</code> 丢进 IDA，找到 <code>RGLoader_load</code> 的实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">rgloader_load</span><span class="params">(<span class="keyword">int</span> a1, _DWORD *a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4)</span> </span>&#123;</div><div class="line">    <span class="comment">// 省略 ...</span></div><div class="line">    v126 = v124;</div><div class="line">    v127 = _decode_node(v124);</div><div class="line">    mstream_close(v126);</div><div class="line">    ruby_xfree(v23);</div><div class="line">    <span class="keyword">if</span> ( !v127 || decoder_error )</div><div class="line">        <span class="keyword">goto</span> LABEL_243;</div><div class="line">    v128 = *(_DWORD *)(rb_thread_current() + <span class="number">16</span>);</div><div class="line">    v210 = *(_DWORD *)(v128 + <span class="number">60</span>);</div><div class="line">    <span class="keyword">if</span> ( a1 == rgloader_module )</div><div class="line">        *(_DWORD *)(v128 + <span class="number">60</span>) = *(_DWORD *)(*(_DWORD *)(v128 + <span class="number">24</span>) + <span class="number">56</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        *(_DWORD *)(v128 + <span class="number">60</span>) = *(_DWORD *)(*(_DWORD *)(v128 + <span class="number">24</span>) + <span class="number">16</span>);</div><div class="line">    v129 = (<span class="keyword">char</span> *)rg_current_realfilepath();</div><div class="line">    v130 = rb_sourcefile();</div><div class="line">    v131 = rb_str_new_cstr(v130);</div><div class="line">    v132 = rb_str_new_static(<span class="string">"&lt;encoded&gt;"</span>, <span class="number">9</span>);</div><div class="line">    v133 = rb_iseq_new(v127, v132, v131, v129, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    result = rb_iseq_eval(v133);</div><div class="line">    *(_DWORD *)(v128 + <span class="number">60</span>) = v210;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>嗯，事实上，RubyEncoder 就算是到了 2.3 版本，还是和上面那个帖子所说的一样：</p>
<blockquote>
<p>It turns out, that RubyEncoder uses following scheme: modified
Ruby-1.8.7 interpreter,
that stores encoded AST nodes along with encoding/restriction options,
while rgloader simply decodes it back to AST and executes.</p>
</blockquote>
<p>只不过这里多了一步 <code>v133 = rb_iseq_new(v127, v132, v131, v129, 0, 0);</code> 将 AST 编译成 iseq。</p>
<p>我们可以通过 hook <code>rb_iseq_new</code> 拿到 AST，hook <code>rb_iseq_eval</code> 拿到 iseq。</p>
<p>下面我们修改 Ruby 代码将 AST 以及 iseq dump 出来。</p>
<ol>
<li><p>one byte hack</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">cp rgloader22.linux.x86_64.so bak.so</div><div class="line">sed <span class="string">'s/rb_iseq_eval/rb_iseq_evax/g'</span> rgloader22.linux.x86_64.so &gt; tmp.so</div><div class="line">sed <span class="string">'s/rb_iseq_new/rb_iseq_nex/g'</span> tmp.so &gt; rgloader22.linux.x86_64.so</div></pre></td></tr></table></figure>
</li>
<li><p>在 <code>iseq.c</code> 中实现 <code>rb_iseq_nex</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">VALUE</div><div class="line">rb_iseq_nex(NODE *node, VALUE name, VALUE path, VALUE absolute_path,</div><div class="line">            VALUE parent, <span class="keyword">enum</span> iseq_type type)</div><div class="line">&#123;</div><div class="line">    rb_io_write(rb_stdout, rb_parser_dump_tree(node, <span class="number">0</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line">    <span class="keyword">return</span> rb_iseq_new(node, name, path, absolute_path, parent, type);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现 <code>vm.c</code> 中实现 <code>rb_iseq_evax</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">VALUE</div><div class="line">rb_iseq_evax(VALUE iseqval)</div><div class="line">&#123;</div><div class="line">    rb_io_write(rb_stdout, rb_iseq_disasm(iseqval));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>结果:
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">###########################################################</div><div class="line">## Do NOT use this node dump for any purpose other than  ##</div><div class="line">## debug and research.  Compatibility is not guaranteed. ##</div><div class="line">###########################################################</div><div class="line"></div><div class="line"># @ NODE_SCOPE (line: 1)</div><div class="line"># +- nd_tbl: (empty)</div><div class="line"># +- nd_args:</div><div class="line"># |   (null node)</div><div class="line"># +- nd_body:</div><div class="line">#     @ NODE_FCALL (line: 1)</div><div class="line">#     +- nd_mid: :puts</div><div class="line">#     +- nd_args:</div><div class="line">#         @ NODE_ARRAY (line: 1)</div><div class="line">#         +- nd_alen: 1</div><div class="line">#         +- nd_head:</div><div class="line">#         |   @ NODE_STR (line: 1)</div><div class="line">#         |   +- nd_lit: &quot;Hello World!&quot;</div><div class="line">#         +- nd_next:</div><div class="line">#             (null node)</div><div class="line"></div><div class="line"></div><div class="line">== disasm: &lt;RubyVM::InstructionSequence:&lt;encoded&gt;@./ruby-2.2.6/hello.rb&gt;</div><div class="line">0000 trace            1                                               (   1)</div><div class="line">0002 putself</div><div class="line">0003 putstring        &quot;Hello World!&quot;</div><div class="line">0005 opt_send_without_block &lt;callinfo!mid:puts, argc:1, FCALL|ARGS_SIMPLE&gt;</div><div class="line">0007 leave</div></pre></td></tr></table></figure></p>
<p>上面就是 dump 出来的 AST 和 iseq，不过这些离我们的最终目标还有一点点距离。</p>
<h2 id="0x03-生成代码"><a href="#0x03-生成代码" class="headerlink" title="0x03 生成代码"></a>0x03 生成代码</h2><p>由于之前的 <code>parsetree</code> 已经不能再使用了，google了一番之后，也没有找到现成的，
之前的打算是写一个类似 Python 的 uncompyle 之类的东西, 解析 iseq 结构、构建 AST、生成代码，
不过后面发现自己实在没那么多时间，于是就偷懒直接从 Ruby 的 AST 直接生成代码。</p>
<p>对照着 Ruby 的 <code>node.c</code>、<code>parse.y</code>、<code>compile.c</code> 就可以写出</p>
<p><a href="https://gist.github.com/fate0/a1851bb39efe177bec20dbcd4445f6f3" target="_blank" rel="external">node2ruby.c</a></p>
<p>试试看这个代码反编译的效果，测试文件 <a href="https://github.com/ruby/ruby/blob/ruby_2_2/lib/net/http.rb" target="_blank" rel="external">http.rb</a></p>
<img src="http://static.fatezero.org/blog/img/decrypt-rubyencoder/decrypt-result.png">
<p>感觉效果还是差强人意，代码算是可以能看的，但是想要执行起来还要继续对代码进行修改(因为<a href="https://gist.github.com/fate0/a1851bb39efe177bec20dbcd4445f6f3" target="_blank" rel="external">node2ruby.c</a> 还有挺多地方没考虑到的) </p>
<p>总的来说，Ruby 写的代码还是比较友好的，像我这样的新手都能很快上手，嗯，除了有些小错误外，顺手给 Ruby 提交了两 PR：</p>
<ul>
<li><a href="https://github.com/ruby/ruby/pull/1528" target="_blank" rel="external">node.c: fix NODE_OP_ASGN1 operator</a></li>
<li><a href="https://github.com/ruby/ruby/pull/1529" target="_blank" rel="external">node.c: fix nd_ainfo-&gt;kw_rest_arg</a></li>
</ul>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>写 <a href="https://gist.github.com/fate0/a1851bb39efe177bec20dbcd4445f6f3" target="_blank" rel="external">node2ruby.c</a> 的时候就觉得如果不是特别熟悉 Ruby 的话，有些比较奇怪的语句还是想不到的。</p>
<p>对了，还记得我们上面所说的，如果没有 License 文件，就很难将程序跑起来么？
嗯，我要解密的 Ruby 代码就是必须要 License 文件的，而且我还没有 License。</p>
<iframe src="//music.163.com/outchain/player?type=2&id=411754563&auto=0&height=66" width="500" height="86" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;RubyEncoder 是一款对 Ruby 代码进行混淆加密的软件，因为最近我要破解某个使用 RubyEncoder 加密的 Ruby 程序，
所以工作就转移到如何解密 RubyEncoder 加密的程序。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>阴阳师：一个非酋的逆向旅程</title>
    <link href="http://blog.fatezero.org/2017/01/14/decrypt-onmyoji/"/>
    <id>http://blog.fatezero.org/2017/01/14/decrypt-onmyoji/</id>
    <published>2017-01-14T12:15:11.000Z</published>
    <updated>2017-08-05T08:22:28.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>为了验证这个游戏到底有没有 SSR</p>
<a id="more"></a>
<h2 id="0x01-前期工作"><a href="#0x01-前期工作" class="headerlink" title="0x01 前期工作"></a>0x01 前期工作</h2><p>直接将 <code>onmyoji_netease_1.0.14.apk</code> 解压出来观察各个文件，便可以知道阴阳师是使用 <code>NeoX + Python</code>。
其中 <code>lib/armeabi-v7a/libclient.so</code> 和 <code>assets/script.npk</code> 这两个文件，
一个是带着 Python 虚拟机以及加解密相关的 so 文件，一个是加密之后的 Python 文件，
所以我们后期的工作中心也主要放在这两个文件上。</p>
<p>为了能够在后面调试阴阳师，我们需要对阴阳师重打包：</p>
<ol>
<li><p>使用 <code>apktool</code> 解包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apktool d onmyoji_netease_1.0.14.apk</div></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>debuggable</code><br>将 <code>AndroidManifest.xml</code> 中的 <code>debuggable</code> 修改为 <code>true</code></p>
</li>
<li><p>重打包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apktool b onmyoji_netease_1.0.14</div></pre></td></tr></table></figure>
</li>
<li><p>签名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">java -jar signapk.jar platform.x509.pem platform.pk8 onmyoji_netease_1.0.14.apk onmyoji_netease_1.0.14_fix.apk</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="0x02-Android-调试初试"><a href="#0x02-Android-调试初试" class="headerlink" title="0x02 Android 调试初试"></a>0x02 Android 调试初试</h2><p>由于我是第一次进行 Android 调试，所以这里我写得稍微啰嗦一点儿。</p>
<ol>
<li><p>关闭SELinux</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">setenforce 0</div></pre></td></tr></table></figure>
</li>
<li><p>运行 android_server</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/data/android_server</div></pre></td></tr></table></figure>
</li>
<li><p>将 android_server 的端口转发到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">adb forward tcp:23946 tcp:23946</div></pre></td></tr></table></figure>
</li>
<li><p>启动阴阳师</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">am start -D -n  com.netease.onmyoji/com.netease.onmyoji.Launcher</div></pre></td></tr></table></figure>
</li>
<li><p>IDA 远程 Attach</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/ida_remote_attach.png">
</li>
<li><p>IDA 设置调试选项</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/ida_debug_option.png">
</li>
<li><p>将阴阳师的调试端口转发到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ps | grep netease.onmyoji</div><div class="line">adb forward tcp:17178 jdwp:process_pid</div></pre></td></tr></table></figure>
</li>
<li><p>jdb 附加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=17178</div></pre></td></tr></table></figure>
</li>
</ol>
<p>由于种种原因，我需要重开很多次阴阳师，所以我就将步骤 7，8 合并成一个 <code>copy &amp; paste</code> 的命令
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">for /f &quot;delims=&quot; %i in (&apos;adb shell &quot;set `ps |grep netease.onmyoji`; echo -n $2&quot;&apos;) do adb forward tcp:17178 jdwp:%i &amp;&amp; jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=17178</div></pre></td></tr></table></figure></p>
<h2 id="0x03-格式分析"><a href="#0x03-格式分析" class="headerlink" title="0x03 格式分析"></a>0x03 格式分析</h2><p>在动态调试前，我们还是先看一下 <code>assets/script.npk</code> 的格式。虽然之前逆过网易其他游戏，也知道这文件是什么格式，
不过还是说一下我第一次分析的步骤，我们使用 C32 将其打开：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/script-format-1.png">
<p>除了一个 <code>NXPK</code> 的 header，也看不出其他信息，我们再看看文件的尾部：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/script-format-2.png">
<p>好像也没有什么特别的信息，不过等等，我们把窗口调整一下：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/script-format-3.png">
<p>现在就可以很清楚的看到数据中间有一排 <code>00000000</code>。我们可以大胆猜测有效数据是由 <code>00000000</code> 进行分割，
我们拿一小段数据出来分析：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">00000000 4C71C6FD ECD60A00 69040000 69040000 3057F779 3057F779</div><div class="line">00000000 A9B3CEFD 5CB91F00 AC000000 AC000000 80C1D70C 80C1D70C</div><div class="line">00000000 950CD6FD FC7E3500 C4050000 C4050000 21433D9E 21433D9E</div><div class="line">00000000 CA1EF8FD D88F2700 FE100000 FE100000 6BB047E4 6BB047E4</div><div class="line">00000000 73A33EFE 50614200 A71B0000 A71B0000 4A32F72E 4A32F72E</div><div class="line">00000000 A5E959FE C40B0300 0A090000 0A090000 9B7A1F45 9B7A1F45</div></pre></td></tr></table></figure>
<p>我们会发现：</p>
<ul>
<li>第四排和第五排数据重复，第六排和第七排数据重复，所以有效数据只有四排</li>
<li>第二排数据的尾部是由上至下递增的，但是第二排的数据已经大过了文件大小，暂时意义不明</li>
<li>第三排数据，存在和 <code>assets/script.npk</code> 文件大小相近的数据，但是不存在大于文件大小的数据，猜测第三排的数据和 <code>assets/script.npk</code> 文件的 <code>offset</code> 相关</li>
<li>再看看第四排的数据，第四排的数据都偏小，猜测第四排的数据和文件的 <code>大小</code> 相关</li>
<li>最后看第五排数据，暂时意义不明</li>
</ul>
<p>所以到这里我们可以猜测 <code>assets/script.npk</code> 的尾部数据是一个索引表，
阴阳师通过 Python 文件名计算出索引表的偏移量，然后再通过表格里面的文件偏移和大小，
获取到对应加密后的 Python 代码。</p>
<p>如果索引表真的存在，那么程序如何确定这个表的起始地址呢，我们找到这个索引表的前部：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/script-format-4.png">
<p>可以看到这个表格的起始地址为 <code>0x00522DE8</code>，我们在 C32 里面搜索这个地址：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/script-format-5.png">
<p>会发现文件起始地址偏移 0x14 处记录了索引表的地址。</p>
<p>总结: </p>
<ul>
<li><code>assets/script.npk</code> 在偏移量 0x14 处记录了索引表的地址</li>
<li>索引表每个索引由 <code>0x00000000</code> 进行分割</li>
<li>索引中的第三排数据是某个 Python 文件在 <code>assets/script.npk</code> 的偏移量</li>
<li>索引中的第四排数据是某个 Python 文件的大小</li>
</ul>
<h2 id="0x03-动态调试"><a href="#0x03-动态调试" class="headerlink" title="0x03 动态调试"></a>0x03 动态调试</h2><h4 id="read-amp-open"><a href="#read-amp-open" class="headerlink" title="read &amp; open"></a>read &amp; open</h4><p>在文章前面提过，<code>lib/armeabi-v7a/libclient.so</code> 和 <code>assets/script.npk</code> 这两个是重点文件，
在 <code>libclient.so</code> 加载之后，自然要关注一下 <code>script.npk</code>。</p>
<p>要想解密 <code>script.npk</code>，基本思路还是挺简单的：关注 <code>script.npk</code> 读取的数据经过了怎么样的处理。</p>
<p>为了更好的将 <code>read</code> 函数中的 fd 与文件名对应，我在 <code>open</code> 处下条件断点，并加上下面的判断：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> idc</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> hasattr(idc, <span class="string">"fd_map"</span>):</div><div class="line">    idc.fd_map = &#123;&#125;</div><div class="line"></div><div class="line">filename = GetString(cpu.r0)</div><div class="line"></div><div class="line"><span class="keyword">if</span> filename <span class="keyword">and</span> <span class="string">"script.npk"</span> <span class="keyword">in</span> filename:</div><div class="line">    StepUntilRet()</div><div class="line">    GetDebuggerEvent(WFNE_SUSP, <span class="number">-1</span>)</div><div class="line">    fd = cpu.r0</div><div class="line">    continue_process()</div><div class="line">    <span class="keyword">if</span> fd != idaapi.BADADDR:</div><div class="line">        print(<span class="string">"open: %s fd: %s"</span> % (filename, fd))</div><div class="line">        idc.fd_map[fd] = filename</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"open: %s"</span> % filename)</div><div class="line">    </div><div class="line"><span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>上面的代码主要是将和 <code>script.npk</code> 相关的 fd 和文件名关联起来，
方便于在 <code>read</code> 调用时区分和 <code>script.npk</code> 相关的读取操作。</p>
<p><code>read</code> 函数条件断点代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> idc</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> hasattr(idc, <span class="string">'fd_map'</span>):</div><div class="line">    <span class="keyword">return</span></div><div class="line"></div><div class="line">fd = cpu.r0</div><div class="line"></div><div class="line"><span class="keyword">if</span> fd <span class="keyword">in</span> idc.fd_map:</div><div class="line">    print(<span class="string">"reading: %s"</span> % idc.fd_map[fd])</div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    </div><div class="line"><span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>下了断点之后，你会发现这并没有什么用，因为调用次数过多，而且是由 Python 代码来负责读取解密，
如果要完整的跟完一次解密过程会特别累，既然是 Python 代码来负责读取解密，
那我们就在 <code>PyEval_EvalFrameEx</code> 处下断点来查看是什么文件在进行读取解密，添加如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> idc</div><div class="line"><span class="keyword">import</span> idautils</div><div class="line"></div><div class="line">f_code_addr =  idc.Dword(idautils.cpu.r0 + <span class="number">16</span>)</div><div class="line">strobj_addr = (idc.Dword(f_code_addr + <span class="number">48</span>))</div><div class="line"></div><div class="line">print(<span class="string">'eval: '</span> + idc.GetString(strobj_addr + <span class="number">20</span>))</div></pre></td></tr></table></figure>
<p>跑起来：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/redirect-show.png">
<p>这个时候我们就发现了一个可疑文件 <code>redirect.py</code>，这个 <code>redirect.py</code> 是什么时候加载的呢？
如果是从磁盘里读取的话，前面在 <code>open</code> 处的 log 会记录下来，
可是 <code>open</code> 处的 log 并没有和 <code>redirect.py</code> 相关的信息，
所以阴阳师要么用了一种比较奇怪的方式在磁盘内读取了这个文件，导致我们没有记录到，
要么就是在内部直接创建了这个 <code>redirect</code> 模块，我们先不要把情况想得太复杂，
还是先查看一下这个 <code>redirect.py</code> 模块。</p>
<h4 id="Appcall"><a href="#Appcall" class="headerlink" title="Appcall"></a>Appcall</h4><p>想要查看 <code>redirect.py</code> 模块，我们就需要 <a href="https://www.hex-rays.com/products/ida/support/tutorials/debugging_appcall.pdf" target="_blank" rel="external">IDA Appcall</a>
，<code>Appcall</code> 可以在调试的过程中，在当前程序执行环境下执行程序内、某个我们指定的函数，
所以使用 <code>Appcall</code> 调用 <code>PyRun_SimpleString</code> 我们就可以查看 Python 程序当前运行时的内部信息。</p>
<p>在这里，我们查看一下所有已经加载的 Python 模块信息：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/appcall-command-line.png">
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/appcall-get-sysmodules-1.png">
<p>信息太多了，我们只看 <code>redirect</code> 模块信息：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/appcall-get-sysmodules-2.png">
<p>发现这个 <code>redirect</code> 既不是内置模块，也不是 frozen 模块，是一个纯 Python 模块，所以我们要找到什么时候创建了这个模块。</p>
<h4 id="寻找-redirect-的创建点"><a href="#寻找-redirect-的创建点" class="headerlink" title="寻找 redirect 的创建点"></a>寻找 redirect 的创建点</h4><p>我们在 <code>PyImport_ImportModule</code>、<code>PyImport_ImportFrozenModule</code> 处下断点，继续打 log 重新跑一次：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/import-log-result.png">
<p>然而并没有 <code>import redirect</code>，这个时候我们就只能用土方法，在 <code>Py_Initialize</code> 函数执行结束之后，
通过单步跟踪以及不断的使用 <code>Appcall</code> 查看 <code>redirect</code> 模块是否被创建，
最终确定了创建 <code>redirect</code> 模块的函数 <code>sub_AD109C</code>，这个函数正在 <code>Py_Intialize</code> 调用处的下方：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/disassemble-1.png">
<p>我们再仔细看看 <code>sub_AD109C</code> 函数的实现：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/disassemble-2.png">
<p>到这里我们可以很清楚的看到创建 <code>redirect</code> 模块的过程：</p>
<ul>
<li><code>PyMarshal_ReadObjectFromString</code> 从程序某处读取 marshal 格式的字符串</li>
<li><code>PyImport_ExecCodeModule</code> 创建 <code>redirect</code> 模块</li>
</ul>
<p>原来阴阳师是直接用 marshal 格式字符串直接创建一个模块，之前我们还没意识到有 <code>PyImport_ExecCodeModule</code> 这么一个函数，
现在我们直接给 <code>PyMarshal_ReadObjectFromString</code> 下断点：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/dump-redirect-marshal-format.png">
<p>终于拿到了 <code>redirect.py</code> 的 marshal 格式字符串了。</p>
<h2 id="0x04-查看-redirect"><a href="#0x04-查看-redirect" class="headerlink" title="0x04 查看 redirect"></a>0x04 查看 redirect</h2><p>拿到了 <code>redirect</code> 模块 marshal 格式的字符串之后，添加一个 py27 的 header: <code>\x03\xf3\x0d\x0a\x00\x00\x00\x00</code>，
然后直接使用 <code>uncompyle2</code> 反编译试试看：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/redirect-uncompyle-error.png">
<p>oops，报错了，我们看一下这个 pyc 文件内部情况：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/redirect-info.png">
<p>常量表，文件名都正常，再看一下 opcode：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/redirect-dis-error.png">
<p>又报错了，我们仔细观察一下这些 opcode，会发现这些 opcode 并不是一个正常 Python 文件会产生的 opcode，
153 没有对应 opcode name，<code>EXTENDED_ARG</code> 这个 opcode 只有传递参数超过 65535 个的时候才会出现。
所以革命尚未成功，同志任需努力。</p>
<h2 id="0x05-opcode-映射关系"><a href="#0x05-opcode-映射关系" class="headerlink" title="0x05 opcode 映射关系"></a>0x05 opcode 映射关系</h2><p>看起来阴阳师好像是直接修改 Python opcode 映射关系，也就是原本 opcode 为 1 的时候代表的是 <code>POP_TOP</code>，
但是在这里被修改成 <code>ROT_THREE</code> 或者其他，想要解密 <code>redirect.pyc</code>，就必须拿到修改后的 opcode 映射关系。</p>
<p>想要拿到修改后的 opcode 映射关系，可以选择慢慢看 python 那个巨大的 switch，分析每个 opcode 对应的代码，
不过这样的方法太累人了，我们要换一种更简单的思路：</p>
<ol>
<li>使用阴阳师的 Python 来获取 一个 python script 的 pyc</li>
<li>使用正常 Python 来获取 一个 python sctipt 的 pyc</li>
<li>对比两个 pyc，拿到部分修改后的 opcode 映射关系，然后重复 1、2 两步直到 opcode 映射关系完整</li>
</ol>
<h4 id="获取-pyc"><a href="#获取-pyc" class="headerlink" title="获取 pyc"></a>获取 pyc</h4><p>想要使用阴阳师的 Python 来执行一段代码，我们就必须在 PC 上交叉编译一个程序来调用 <code>libclient.so</code> 中 Python。</p>
<p>代码如下：
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * arm-linux-androideabi-gcc test.c -o test -ldl -pie</span></div><div class="line"><span class="comment"> * export LD_LIBRARY_PATH=./</span></div><div class="line"><span class="comment"> * cp test /path/to/libclient.so</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</div><div class="line">    <span class="keyword">void</span> (*Py_Initialize)();</div><div class="line">    <span class="keyword">void</span> (*PyRun_SimpleString)(<span class="keyword">char</span> *);</div><div class="line">    <span class="keyword">void</span> (*Py_Finalize)();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s script.py\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FILE *fp = fopen(argv[<span class="number">1</span>], <span class="string">"rb"</span>);</div><div class="line"></div><div class="line">    fseek(fp, <span class="number">0</span>, SEEK_END);</div><div class="line">    <span class="keyword">int</span> file_len = ftell(fp);</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *buf = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(file_len + <span class="number">1</span>);</div><div class="line">    fseek(fp, <span class="number">0</span>, SEEK_SET);</div><div class="line">    fread(buf, file_len, <span class="number">1</span>, fp);</div><div class="line">    buf[file_len] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> *libm_handle = dlopen(<span class="string">"libclient.so"</span>, RTLD_LAZY );</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!libm_handle)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Open Error:%s.\n"</span>, dlerror());</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Py_Initialize = dlsym(libm_handle, <span class="string">"Py_Initialize"</span>);</div><div class="line">    Py_Initialize();</div><div class="line"></div><div class="line">    PyRun_SimpleString = dlsym(libm_handle, <span class="string">"PyRun_SimpleString"</span>);</div><div class="line">    PyRun_SimpleString(buf);</div><div class="line"></div><div class="line">    Py_Finalize = dlsym(libm_handle, <span class="string">"Py_Finalize"</span>);</div><div class="line">    Py_Finalize();</div><div class="line"></div><div class="line">    dlclose(libm_handle);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)buf);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将交叉编译后的程序 <code>test</code> 放到和 <code>libclient.so</code> 同一个目录下。</p>
<p>除了上面的方法外，我们还可以继续使用 <a href="https://www.hex-rays.com/products/ida/support/tutorials/debugging_appcall.pdf" target="_blank" rel="external">IDA Appcall</a>，
但是经常时灵时不灵：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/appcall-error.png">
<p>遇到这种情况，差不多只能重新开始了，所以最好还是直接使用之前交叉编译的程序。</p>
<p>现在为了更快的拿到所有 opcode 的映射关系，我直接写了一份使用了所有 <code>Python 2.7 opcode</code> 的文件：
<a href="https://gist.github.com/fate0/3e1d23bce9d4d2cfa93848dd92aba3d4" target="_blank" rel="external">py27opcode.py</a></p>
<p>因为 <code>from __future__ import division</code> 会影响 <code>division</code>，
要么一个文件的 divide 全是 true divide，要么全是正常的 divide，不能共存。</p>
<p>所以要使用阴阳师的 Python dump 两份 pyc，普通 Python dump 两份 pyc。</p>
<p>获取 pyc 脚本代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> marshal</div><div class="line"></div><div class="line">infile = <span class="string">'py27opcode.py'</span></div><div class="line">outfile = <span class="string">'android_py27opcode.pyc'</span></div><div class="line"></div><div class="line">content = open(infile).read()</div><div class="line">out_fd = open(outfile, <span class="string">'wb'</span>)</div><div class="line">cobj = compile(content, <span class="string">''</span>, <span class="string">'exec'</span>)</div><div class="line">marshal.dump(cobj, out_fd)</div><div class="line">out_fd.close()</div></pre></td></tr></table></figure>
<p>用我们在 Android 上使用之前交叉编译后的程序运行上面的代码，得到 <code>android_py27opcode.pyc</code>，
删除 division 的注释后再运行一次，得到 <code>android_py27opcode1.pyc</code>，在普通环境下，
使用没修改过的 <code>Python 2.7.3</code> 再执行相同操作，分别得到 <code>normal_py27opcode.pyc</code> 和 <code>normal_py27opcode1.pyc</code></p>
<h4 id="对比-pyc-文件"><a href="#对比-pyc-文件" class="headerlink" title="对比 pyc 文件"></a>对比 pyc 文件</h4><p>直接写代码，对比两组 pyc 的 opcode，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> marshal</div><div class="line"></div><div class="line">opmap = &#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(cobj1, cobj2)</span>:</span></div><div class="line">    codestr1 = bytearray(cobj1.co_code)</div><div class="line">    codestr2 = bytearray(cobj2.co_code)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> len(codestr1) != len(codestr2):</div><div class="line">        print(<span class="string">"two cobj has different length, skipping"</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> i &lt; len(codestr1):</div><div class="line">        <span class="keyword">if</span> codestr1[i] <span class="keyword">not</span> <span class="keyword">in</span> opmap:</div><div class="line">            opmap[codestr1[i]] = codestr2[i]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> opmap[codestr1[i]] != codestr2[i]:</div><div class="line">                print(<span class="string">"error: has wrong opcode"</span>)</div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> codestr1[i] &lt; <span class="number">90</span> <span class="keyword">and</span> codestr2[i] &lt; <span class="number">90</span>:</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> codestr1[i] &gt;= <span class="number">90</span> <span class="keyword">and</span> codestr2[i] &gt;= <span class="number">90</span>:</div><div class="line">            i += <span class="number">3</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"wrong opcode"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> const1, const2 <span class="keyword">in</span> zip(cobj1.co_consts, cobj2.co_consts):</div><div class="line">        <span class="keyword">if</span> hasattr(const1, <span class="string">'co_code'</span>) <span class="keyword">and</span> hasattr(const2, <span class="string">'co_code'</span>):</div><div class="line">            compare(const1, const2)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"Usage: %s filename1.pyc filename2.pyc"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</div><div class="line">        usage()</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    cobj1 = marshal.loads(open(sys.argv[<span class="number">1</span>]).read())</div><div class="line">    cobj2 = marshal.loads(open(sys.argv[<span class="number">2</span>]).read())</div><div class="line">    compare(cobj1, cobj2)</div><div class="line">    print(opmap)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/compare-opcode-result.png">
<p>将两组结果进行合并拿到最终的一个 opcode 映射关系。</p>
<h4 id="纠正-opcode"><a href="#纠正-opcode" class="headerlink" title="纠正 opcode"></a>纠正 opcode</h4><p>至此，我们已经有足够的信息去修正 <code>redirect.py</code> 中错位的 opcode，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> zlib</div><div class="line"><span class="keyword">import</span> rotor</div><div class="line"><span class="keyword">import</span> marshal</div><div class="line"><span class="keyword">import</span> binascii</div><div class="line"><span class="keyword">import</span> argparse</div><div class="line"><span class="keyword">import</span> pymarshal</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PYCEncryptor</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.opcode_encrypt_map = &#123;</div><div class="line">            <span class="number">1</span>: <span class="number">38</span>, <span class="number">2</span>: <span class="number">46</span>, <span class="number">3</span>: <span class="number">37</span>, <span class="number">4</span>: <span class="number">66</span>, <span class="number">5</span>: <span class="number">12</span>, <span class="number">10</span>: <span class="number">35</span>, <span class="number">11</span>: <span class="number">67</span>, <span class="number">12</span>: <span class="number">81</span>, <span class="number">13</span>: <span class="number">32</span>, <span class="number">15</span>: <span class="number">9</span>, <span class="number">19</span>: <span class="number">63</span>, <span class="number">20</span>: <span class="number">70</span>,</div><div class="line">            <span class="number">21</span>: <span class="number">44</span>, <span class="number">22</span>: <span class="number">36</span>, <span class="number">23</span>: <span class="number">39</span>, <span class="number">24</span>: <span class="number">57</span>, <span class="number">25</span>: <span class="number">10</span>, <span class="number">26</span>: <span class="number">52</span>, <span class="number">28</span>: <span class="number">49</span>, <span class="number">30</span>: <span class="number">86</span>, <span class="number">31</span>: <span class="number">87</span>, <span class="number">32</span>: <span class="number">88</span>, <span class="number">33</span>: <span class="number">89</span>,</div><div class="line">            <span class="number">40</span>: <span class="number">24</span>, <span class="number">41</span>: <span class="number">25</span>, <span class="number">42</span>: <span class="number">26</span>, <span class="number">43</span>: <span class="number">27</span>, <span class="number">50</span>: <span class="number">14</span>, <span class="number">51</span>: <span class="number">15</span>, <span class="number">52</span>: <span class="number">16</span>, <span class="number">53</span>: <span class="number">17</span>, <span class="number">54</span>: <span class="number">8</span>, <span class="number">55</span>: <span class="number">21</span>, <span class="number">56</span>: <span class="number">55</span>,</div><div class="line">            <span class="number">57</span>: <span class="number">82</span>, <span class="number">58</span>: <span class="number">34</span>, <span class="number">59</span>: <span class="number">22</span>, <span class="number">60</span>: <span class="number">65</span>, <span class="number">61</span>: <span class="number">6</span>, <span class="number">62</span>: <span class="number">58</span>, <span class="number">63</span>: <span class="number">71</span>, <span class="number">64</span>: <span class="number">43</span>, <span class="number">65</span>: <span class="number">30</span>, <span class="number">66</span>: <span class="number">19</span>, <span class="number">67</span>: <span class="number">5</span>,</div><div class="line">            <span class="number">68</span>: <span class="number">60</span>, <span class="number">71</span>: <span class="number">53</span>, <span class="number">72</span>: <span class="number">42</span>, <span class="number">73</span>: <span class="number">3</span>, <span class="number">74</span>: <span class="number">48</span>, <span class="number">75</span>: <span class="number">84</span>, <span class="number">76</span>: <span class="number">77</span>, <span class="number">77</span>: <span class="number">78</span>, <span class="number">78</span>: <span class="number">85</span>, <span class="number">79</span>: <span class="number">47</span>, <span class="number">80</span>: <span class="number">51</span>,</div><div class="line">            <span class="number">81</span>: <span class="number">54</span>, <span class="number">82</span>: <span class="number">50</span>, <span class="number">83</span>: <span class="number">83</span>, <span class="number">84</span>: <span class="number">74</span>, <span class="number">85</span>: <span class="number">64</span>, <span class="number">86</span>: <span class="number">31</span>, <span class="number">87</span>: <span class="number">72</span>, <span class="number">88</span>: <span class="number">45</span>, <span class="number">89</span>: <span class="number">33</span>, <span class="number">90</span>: <span class="number">145</span>, <span class="number">91</span>: <span class="number">159</span>,</div><div class="line">            <span class="number">92</span>: <span class="number">125</span>, <span class="number">93</span>: <span class="number">149</span>, <span class="number">94</span>: <span class="number">157</span>, <span class="number">95</span>: <span class="number">132</span>, <span class="number">96</span>: <span class="number">95</span>, <span class="number">97</span>: <span class="number">113</span>, <span class="number">98</span>: <span class="number">111</span>, <span class="number">99</span>: <span class="number">138</span>, <span class="number">100</span>: <span class="number">153</span>, <span class="number">101</span>: <span class="number">101</span>,</div><div class="line">            <span class="number">102</span>: <span class="number">135</span>, <span class="number">103</span>: <span class="number">90</span>, <span class="number">104</span>: <span class="number">99</span>, <span class="number">105</span>: <span class="number">151</span>, <span class="number">106</span>: <span class="number">96</span>, <span class="number">107</span>: <span class="number">114</span>, <span class="number">108</span>: <span class="number">134</span>, <span class="number">109</span>: <span class="number">116</span>, <span class="number">110</span>: <span class="number">156</span>,</div><div class="line">            <span class="number">111</span>: <span class="number">105</span>, <span class="number">112</span>: <span class="number">130</span>, <span class="number">113</span>: <span class="number">137</span>, <span class="number">114</span>: <span class="number">148</span>, <span class="number">115</span>: <span class="number">172</span>, <span class="number">116</span>: <span class="number">155</span>, <span class="number">119</span>: <span class="number">103</span>, <span class="number">120</span>: <span class="number">158</span>, <span class="number">121</span>: <span class="number">128</span>,</div><div class="line">            <span class="number">122</span>: <span class="number">110</span>, <span class="number">124</span>: <span class="number">97</span>, <span class="number">125</span>: <span class="number">104</span>, <span class="number">126</span>: <span class="number">118</span>, <span class="number">130</span>: <span class="number">93</span>, <span class="number">131</span>: <span class="number">131</span>, <span class="number">132</span>: <span class="number">136</span>, <span class="number">133</span>: <span class="number">115</span>, <span class="number">134</span>: <span class="number">100</span>, <span class="number">135</span>: <span class="number">120</span>,</div><div class="line">            <span class="number">136</span>: <span class="number">129</span>, <span class="number">137</span>: <span class="number">102</span>, <span class="number">140</span>: <span class="number">140</span>, <span class="number">141</span>: <span class="number">141</span>, <span class="number">142</span>: <span class="number">142</span>, <span class="number">143</span>: <span class="number">94</span>, <span class="number">146</span>: <span class="number">109</span>, <span class="number">147</span>: <span class="number">123</span></div><div class="line">        &#125;</div><div class="line">        self.opcode_decrypt_map = &#123;self.opcode_encrypt_map[key]: key <span class="keyword">for</span> key <span class="keyword">in</span> self.opcode_encrypt_map&#125;</div><div class="line">        self.pyc27_header = <span class="string">"\x03\xf3\x0d\x0a\x00\x00\x00\x00"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_decrypt_file</span><span class="params">(self, filename)</span>:</span></div><div class="line">        os.path.splitext(filename)</div><div class="line">        content = open(filename).read()</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            m = pymarshal.loads(content)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                m = marshal.loads(content)</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                print(<span class="string">"[!] error: %s"</span> % str(e))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> m.co_filename.replace(<span class="string">'\\'</span>, <span class="string">'/'</span>), pymarshal.dumps(m, self.opcode_decrypt_map)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt_file</span><span class="params">(self, input_file, output_file=None)</span>:</span></div><div class="line">        result = self._decrypt_file(input_file)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result:</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        pyc_filename, pyc_content = result</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> output_file:</div><div class="line">            output_file = os.path.basename(pyc_filename) + <span class="string">'.pyc'</span></div><div class="line"></div><div class="line">        <span class="keyword">with</span> open(output_file, <span class="string">'wb'</span>) <span class="keyword">as</span> fd:</div><div class="line">            fd.write(self.pyc27_header + pyc_content)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    parser = argparse.ArgumentParser(description=<span class="string">'onmyoji py decrypt tool'</span>)</div><div class="line"></div><div class="line">    parser.add_argument(<span class="string">"INPUT_NAME"</span>, help=<span class="string">'input file'</span>)</div><div class="line">    parser.add_argument(<span class="string">"OUTPUT_NAME"</span>, help=<span class="string">'output file'</span>)</div><div class="line"></div><div class="line">    args = parser.parse_args()</div><div class="line"></div><div class="line">    encryptor = PYCEncryptor()</div><div class="line">    encryptor.decrypt_file(args.INPUT_NAME, args.OUTPUT_NAME)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/redirect-opcode-unmapping.png">
<h4 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h4><p>这次我们直接用 <code>uncompyle2</code> 反编译：</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/redirect-uncompyle-success.png">
<p>终于成功解出 <code>redirect.py</code> 文件了，根据这个 <code>redirect.py</code> 给出的信息，我们就可以拿到解密 <code>script.npk</code> 的方法：</p>
<ol>
<li>按照之前分析 <code>script.npk</code> 的方法，事先将每个加密后的 python 文件分割出来</li>
<li>按照 <code>redirect.py</code> 里面的加密方法，写出解密过程</li>
<li>按照之前方法，再修正每个 python 脚本的 opcode 映射关系</li>
</ol>
<p>至此逆向代码的工作终于完成了。</p>
<h2 id="0x05-IDAPython"><a href="#0x05-IDAPython" class="headerlink" title="0x05 IDAPython"></a>0x05 IDAPython</h2><p>记录一下在分析过程中使用的 script：</p>
<h4 id="1-尝试自动化"><a href="#1-尝试自动化" class="headerlink" title="1. 尝试自动化"></a>1. 尝试自动化</h4><p>因为要经常重开阴阳师，但是每次重新调试都需要我手动重复暂停继续等待加载 <code>libclient.so</code>，所以我写了这么一个 IDAPython Script:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> idc <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> idaapi <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> idautils <span class="keyword">import</span> *</div><div class="line"></div><div class="line">bt_cond = <span class="string">"""</span></div><div class="line"><span class="string">filename = GetString(cpu.r0)</span></div><div class="line"><span class="string">print("loading: %s" % filename)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">if not filename:</span></div><div class="line"><span class="string">    return True</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">if filename == "libclient.so":</span></div><div class="line"><span class="string">    return True</span></div><div class="line"><span class="string">"""</span></div><div class="line">add_bpt(LocByName(<span class="string">'__dl__ZL17soinfo_link_imageP6soinfoPK17android_dlextinfo'</span>), <span class="number">0</span>, BPT_SOFT)</div><div class="line">enable_bpt(LocByName(<span class="string">'__dl__ZL17soinfo_link_imageP6soinfoPK17android_dlextinfo'</span>), <span class="keyword">True</span>)</div><div class="line">SetBptCnd(LocByName(<span class="string">'__dl__ZL17soinfo_link_imageP6soinfoPK17android_dlextinfo'</span>), bt_cond)</div></pre></td></tr></table></figure>
<p>看着是没什么问题，但是有时候 <code>GetString(cpu.r0)</code> 返回一个 <code>idaapi.BADADDR</code>，所以 IDA 暂停了，
但是暂停的时候去查看这个地址的内容却发现是正常数据，并不是 <code>idaapi.BADADDR</code>，这个情况我并没有去解决，后面还是老老实实手动。</p>
<h4 id="2-尝试分析函数"><a href="#2-尝试分析函数" class="headerlink" title="2. 尝试分析函数"></a>2. 尝试分析函数</h4><p>当一些断点断下来的时候，在动态调试的窗口只能看到运行指令以及之后的几条指令，虽然说也可以一直按 <code>C</code> 键，
但是总这样也挺不方便的，所以我将静态调试的 IDA 中<code>text</code> 段的函数地址全部导出到 <code>d:\\ida.txt</code> 中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">funclist = []</div><div class="line"><span class="keyword">for</span> seg_ea <span class="keyword">in</span> Segments():</div><div class="line">    <span class="keyword">if</span> SegName(seg_ea) != <span class="string">'.text'</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> function_ea <span class="keyword">in</span> Functions(SegStart(seg_ea), SegEnd(seg_ea)):</div><div class="line">        funclist.append(function_ea)</div><div class="line"></div><div class="line">py_init = LocByName(<span class="string">'Py_Initialize'</span>)</div><div class="line">funclist.insert(<span class="number">0</span>, py_init)</div><div class="line"></div><div class="line">open(<span class="string">'d:\\ida.txt'</span>, <span class="string">'w'</span>).write(json.dumps(funclist))</div><div class="line">print(<span class="string">'done'</span>)</div></pre></td></tr></table></figure>
<p>然后再将 <code>d:\\ida.txt</code> 的内容再导入到动态调试的 IDA 中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line">funclist = json.loads(open(<span class="string">'d:\\ida.txt'</span>).read())</div><div class="line"></div><div class="line">daynamic_py_init = LocByName(<span class="string">'Py_Initialize'</span>)</div><div class="line">static_py_init = funclist.pop(<span class="number">0</span>)</div><div class="line"></div><div class="line">offset = daynamic_py_init - static_py_init</div><div class="line"></div><div class="line"><span class="keyword">for</span> function_ea <span class="keyword">in</span> funclist:</div><div class="line">    MakeFunction(function_ea + offset)</div><div class="line"></div><div class="line">print(<span class="string">'done'</span>)</div></pre></td></tr></table></figure>
<p>然而因为 <code>libclient.so</code> 中的 <code>text</code> 段有 1w 多个函数，导入的时候 <code>MakeFunction</code> 实在太慢了，
大概要等五分钟才好，用了几次之后我就放弃了这样的方法。</p>
<h4 id="3-显示调用堆栈"><a href="#3-显示调用堆栈" class="headerlink" title="3. 显示调用堆栈"></a>3. 显示调用堆栈</h4><p>不知道为什么我的 <code>Call Stack</code> 一直显示任何东西，不确定是手机的问题还是 IDA 的问题，还是这个 App 的问题，折腾这问题感觉很麻烦。
因为 fp 寄存器还保存着程序的返回地址，所以还是直接写个 IDAPython Script 打印出调用堆栈比较方便的(如果 fp 不能用，
可以参考 <a href="http://www.hexblog.com/?p=104" target="_blank" rel="external">An attempt to reconstruct the call stack</a>)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> idaapi, idautils</div><div class="line"></div><div class="line">static_py_init = <span class="number">0x1285398</span></div><div class="line">dynamic_py_init = LocByName(<span class="string">'Py_Initialize'</span>)</div><div class="line">offset = dynamic_py_init - static_py_init</div><div class="line"></div><div class="line">f_fp = idautils.cpu.fp</div><div class="line">f_pc = <span class="number">0</span></div><div class="line"></div><div class="line">i = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> i &lt; <span class="number">100</span>:</div><div class="line">    i += <span class="number">1</span></div><div class="line">    f_pc = Dword(f_fp)</div><div class="line">    f_fp = Dword(f_fp<span class="number">-4</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> f_fp == idaapi.BADADDR:</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">    print(<span class="string">"%s %s"</span> % (hex(f_pc), hex(f_pc - offset)))</div><div class="line"></div><div class="line">print(<span class="string">'==============================='</span>)</div></pre></td></tr></table></figure>
<h2 id="0x06-简单写个挂"><a href="#0x06-简单写个挂" class="headerlink" title="0x06 简单写个挂"></a>0x06 简单写个挂</h2><p>看了代码之后，发现抽卡的爆率不在本地，但是百鬼夜行的碎片掉率是在本地计算的，简单看一下相关代码片段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># scenemembers/GhostWalkScene.py</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GhostWalkScene</span><span class="params">(GameScene)</span>:</span></div><div class="line">    <span class="comment"># 省略 ...</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CheckFairGhostIsHit</span><span class="params">(self, ghostID, model)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span>  <span class="comment"># modify by fate0</span></div><div class="line">        modelIndex = self.FairModelIndexDict[model]</div><div class="line">        </div><div class="line">        <span class="comment"># 省略 ...</span></div><div class="line"></div><div class="line">        data = random.randint(<span class="number">1</span>, <span class="number">100</span>)</div><div class="line">        <span class="keyword">if</span> data &lt;= int(hitRate * <span class="number">100</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">CheckEffectGhostIsHit</span><span class="params">(self, id)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span>  <span class="comment"># modify by fate0</span></div><div class="line">        rate = float(GhostWalkFairData.data[int(id)][<span class="string">'rate'</span>])</div><div class="line">        </div><div class="line">        <span class="comment"># 省略 ...</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> randInt &lt;= int(rate * <span class="number">100.0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">            </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FireBean</span><span class="params">(self, offsetX, offsetY)</span>:</span></div><div class="line">        helpers.createModelAsync(<span class="string">'model/douzi/douzi.gim'</span>, self.FireBeanCallback, (<span class="number">0.3</span>,</div><div class="line">         offsetX,</div><div class="line">         offsetY,</div><div class="line">         self.PlayerModel))</div><div class="line">        self.TotalBeanNum = self.TotalBeanNum + <span class="number">1</span>  <span class="comment"># modify by fate0</span></div><div class="line">        </div><div class="line">        <span class="comment"># 省略 ...</span></div></pre></td></tr></table></figure>
<ul>
<li><code>CheckFairGhostIsHit</code>: 用来检查走过的式神是否被击中</li>
<li><code>CheckEffectGhostIsHit</code>: 用来检查飞过的状态是否被击中</li>
<li><code>FireBean</code>: 开火</li>
</ul>
<p>所以让 <code>CheckFairGhostIsHit</code> 和 <code>CheckEffectGhostIsHit</code> 这两个方法返回 <code>True</code> 就可以实现百分百命中，
将 <code>self.TotalBeanNum = self.TotalBeanNum - 1</code> 修改成 <code>self.TotalBeanNum = self.TotalBeanNum + 1</code> 就可以实现无限福豆。</p>
<p>视频演示：</p>
<video src="http://static.fatezero.org/blog/video/decrypt-onmyoji/demo.mp4" type="video/mp4" controls="controls" width="100%" height="100%">
</video>

<h2 id="0x07-总结"><a href="#0x07-总结" class="headerlink" title="0x07 总结"></a>0x07 总结</h2><p>第一次逆 Android 程序，感悟就是手机竟然还会有广告？</p>
<h2 id="0x08-更新"><a href="#0x08-更新" class="headerlink" title="0x08 更新"></a>0x08 更新</h2><p>找到一个对任意用户或者对任意频道用户拒绝服务的漏洞，奖励:</p>
<img src="http://static.fatezero.org/blog/img/decrypt-onmyoji/reward.png">
<iframe src="//music.163.com/outchain/player?type=2&id=588640&auto=0&height=66" width="500" height="86" frameborder="0" allowfullscreen></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;为了验证这个游戏到底有没有 SSR&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Komm, süsser Tod</title>
    <link href="http://blog.fatezero.org/2016/12/21/Komm-susser-Tod/"/>
    <id>http://blog.fatezero.org/2016/12/21/Komm-susser-Tod/</id>
    <published>2016-12-21T22:53:27.000Z</published>
    <updated>2017-08-05T08:22:28.899Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章的意义在于测试这个主题所支持的功能</p>
<a id="more"></a>
<h2 id="测试-MarkDown-功能"><a href="#测试-MarkDown-功能" class="headerlink" title="测试 MarkDown 功能"></a>测试 MarkDown 功能</h2><h4 id="0x1-表格"><a href="#0x1-表格" class="headerlink" title="0x1. 表格"></a>0x1. 表格</h4><table>
<thead>
<tr>
<th style="text-align:left">靠左表头</th>
<th style="text-align:center">居中表头</th>
<th style="text-align:right">靠右表头</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>content</code></td>
<td style="text-align:center">内容</td>
<td style="text-align:right">$a=1$</td>
</tr>
<tr>
<td style="text-align:left"><em>内容</em></td>
<td style="text-align:center">$a^3$</td>
<td style="text-align:right"><strong>内容</strong></td>
</tr>
</tbody>
</table>
<h4 id="0x2-代码"><a href="#0x2-代码" class="headerlink" title="0x2. 代码"></a>0x2. 代码</h4><p>这里是代码块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">print(<span class="string">"hello world"</span>)</div></pre></td></tr></table></figure>
<p>这里是行内代码 <code>print(&quot;hello world&quot;)</code></p>
<h4 id="0x3-引用"><a href="#0x3-引用" class="headerlink" title="0x3. 引用"></a>0x3. 引用</h4><blockquote>
<p>这里是引用
第二行引用</p>
</blockquote>
<h4 id="0x4-链接"><a href="#0x4-链接" class="headerlink" title="0x4. 链接"></a>0x4. 链接</h4><p><a href="http://blog.fatezero.org">我的博客</a>
<a href="http://wiki.fatezero.org" target="_blank" rel="external">我的wiki</a></p>
<h4 id="0x5-图片"><a href="#0x5-图片" class="headerlink" title="0x5. 图片"></a>0x5. 图片</h4><p><img src="https://octodex.github.com/images/privateinvestocat.jpg" alt="privateinvestocat"></p>
<h2 id="测试-mathjax"><a href="#测试-mathjax" class="headerlink" title="测试 mathjax"></a>测试 mathjax</h2><p>这里是数学公式块</p>

$$
        \begin{matrix}
        1 & x & x^2 \\
        1 & y & y^2 \\
        1 & z & z^2 \\
        \end{matrix}
$$

<p>这个是行内数学公式 $\sqrt[4]{\frac xy}$</p>
<h2 id="测试-Hexo-功能"><a href="#测试-Hexo-功能" class="headerlink" title="测试 Hexo 功能"></a>测试 Hexo 功能</h2><h4 id="0x1-img"><a href="#0x1-img" class="headerlink" title="0x1. img"></a>0x1. img</h4><img src="https://octodex.github.com/images/privateinvestocat.jpg" width="200" height="200">
<p>一般使用 Hexo 内的图片 tag, 因为可以调整图片大小</p>
<h4 id="0x2-raw"><a href="#0x2-raw" class="headerlink" title="0x2. raw"></a>0x2. raw</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">content</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>
<h4 id="0x3-主题-tip"><a href="#0x3-主题-tip" class="headerlink" title="0x3. 主题 tip"></a>0x3. 主题 tip</h4><div class="tip">
    这个是主题带的 tip
</div>

<h4 id="0x4-iframe"><a href="#0x4-iframe" class="headerlink" title="0x4. iframe"></a>0x4. iframe</h4><iframe src="//music.163.com/outchain/player?type=2&id=31365696&auto=0&height=66" width="500" height="86" frameborder="0" allowfullscreen></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章的意义在于测试这个主题所支持的功能&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
